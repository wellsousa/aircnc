

O Mongo consegue puxar automaticamente todos os dados de um registro em uma 
ou mais tabelas e criar um novo registro com todos esses dados juntos. Isso 
é feito através do metodo 'populate'.

//========================================================================
EXEMPLO DE CÓDIGO


const Booking = require('../Models/Booking');

module.exports = {
    
    async store(req, res){
        const user_id = req.headers.user_id;
        const spot_id = req.params.spot_id;
        const date = req.body.date;

        const booking = await Booking.create({
           user: user_id,
           spot: spot_id,
           date, 
        });

        /*
            O Mongo busca automaticamente todas as informações referente um objeto no banco
            para criar um novo objeto com esses dados. Isso cria, de certa forma, uma redundancia de dados.
        */
        await booking.populate('spot').populate('user').execPopulate();

        return res.json(booking);
    }
};

//======================================================================

CONFIGURAÇÃO DA ROTA NO ARQUIVO PRINCIPAL


const express = require('express');
const mongoose = require('mongoose');
const multer = require('multer');
const uploadLib = require('./Libraries/upload');
const SessionController = require('./Controllers/SessionController');
const SpotController = require('./Controllers/SpotController');
const DashboardController = require('./Controllers/DashboardController');
const BookingController = require('./Controllers/BookingController');

const Routes = require('./Routes');
const upload = multer(uploadLib);

//criando o servidor
const app = express();

mongoose.connect('mongodb+srv://omnistack:omnistack@omnistack90-sh3ds.mongodb.net/aircnc?retryWrites=true&w=majority', {
    useNewUrlParser: true,
    useUnifiedTopology: true
});

/*
    Informa ao node que estamos trabalhando com dados prioritariamente no formato json.
*/
app.use(express.json());
//usa as rotas definidas no 'arquivo routes.js'
app.use(Routes);

Routes.post('/sessions', SessionController.store);

Routes.get('/spots', SpotController.index);
Routes.post('/spots', upload.single('thumbnail'), SpotController.store);

Routes.get('/dashboard', DashboardController.index);

/*
    Configuração da rota 'nested' passando como parametro um spot_id.
    Esse spot_id será determinado no futuro quando criarmos a projeto do frontend
*/
Routes.post('/spots/:spot_id/bookings', BookingController.store);




//a aplicação será executada na porta 3333
app.listen(3333);

//=======================================================================

EXEMPLO DE SAIDA DE DADOS COM populate()

{
  "_id": "5d99d230841d23343881335d",
  "user": {
    "_id": "5d99d182841d23343881335c",
    "email": "zwynglyo@email.com.br",
    "__v": 0
  },
  "spot": null,
  "date": "08 de outubro",
  "__v": 0
}

